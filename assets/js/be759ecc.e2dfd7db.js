"use strict";(globalThis.webpackChunkts_generics=globalThis.webpackChunkts_generics||[]).push([[880],{2938:e=>{e.exports=JSON.parse('{"tag":{"label":"easy","permalink":"/ts-generics/tags/easy","allTagsPath":"/ts-generics/tags","count":10,"items":[{"id":"easy/awaited","title":"Awaited","description":"If we have a type which is wrapped type like Promise. How we can get a type which is inside the wrapped type?","permalink":"/ts-generics/easy/awaited"},{"id":"easy/concat","title":"Concat","description":"Implement the JavaScript Array.concat function in the type system. A type takes the two arguments. The output should be a new array that includes inputs in ltr order","permalink":"/ts-generics/easy/concat"},{"id":"easy/first-of-array","title":"First of Array","description":"Implement a generic First that takes an Array T and returns its first element\'s type.","permalink":"/ts-generics/easy/first-of-array"},{"id":"easy/if","title":"If","description":"Implement the util type If which accepts condition C, a truthy value T, and a falsy value F. C is expected to be either true or false while T and F can be any type.","permalink":"/ts-generics/easy/if"},{"id":"easy/length-of-tuple","title":"Length of Tuple","description":"For given a tuple, you need create a generic Length, pick the length of the tuple","permalink":"/ts-generics/easy/length-of-tuple"},{"id":"easy/pick","title":"Pick","description":"Implement the built-in Pick generic without using it.","permalink":"/ts-generics/easy/pick"},{"id":"easy/push","title":"Push","description":"Implement the generic version of Array.push","permalink":"/ts-generics/easy/push"},{"id":"easy/readonly","title":"Readonly","description":"Implement the built-in Readonly generic without using it.","permalink":"/ts-generics/easy/readonly"},{"id":"easy/tuple-to-object","title":"Tuple to Object","description":"Given an array, transform it into an object type and the key/value must be in the provided array.","permalink":"/ts-generics/easy/tuple-to-object"},{"id":"easy/unshift","title":"Unshift","description":"Implement the generic version of Array.unshift","permalink":"/ts-generics/easy/unshift"}],"unlisted":false}}')}}]);